// Generated by Dagger (https://dagger.dev).
package com.recruitmentapplication.domain.usecase;

import com.recruitmentapplication.domain.repository.ScheduleRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class GetScheduleUseCase_Factory implements Factory<GetScheduleUseCase> {
  private final Provider<ScheduleRepository> scheduleRepositoryProvider;

  public GetScheduleUseCase_Factory(Provider<ScheduleRepository> scheduleRepositoryProvider) {
    this.scheduleRepositoryProvider = scheduleRepositoryProvider;
  }

  @Override
  public GetScheduleUseCase get() {
    return newInstance(scheduleRepositoryProvider.get());
  }

  public static GetScheduleUseCase_Factory create(
      Provider<ScheduleRepository> scheduleRepositoryProvider) {
    return new GetScheduleUseCase_Factory(scheduleRepositoryProvider);
  }

  public static GetScheduleUseCase newInstance(ScheduleRepository scheduleRepository) {
    return new GetScheduleUseCase(scheduleRepository);
  }
}
